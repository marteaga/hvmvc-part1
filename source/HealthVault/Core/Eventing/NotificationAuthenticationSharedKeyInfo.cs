// Copyright(c) Microsoft Corporation.
// This content is subject to the Microsoft Reference Source License,
// see http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.XPath;

using Microsoft.Health;
using Microsoft.Health.ItemTypes;

namespace Microsoft.Health.Events
{
    /// <summary>
    /// Contains the information required to implement shared key authentication for HealthVault eventing.
    /// </summary>
    public class NotificationAuthenticationSharedKeyInfo
    {
        /// <summary>
        /// Create an empty instance of the <see cref="NotificationAuthenticationSharedKeyInfo"/> type.
        /// </summary>
        public NotificationAuthenticationSharedKeyInfo()
        {
        }

        /// <summary>
        /// Create an instance of the <see cref="NotificationAuthenticationSharedKeyInfo"/> type, specifying the
        /// version to use.
        /// </summary>
        /// <remarks>
        /// A random 64-byte key will be generated by the constructor. An application should store this key to 
        /// be used to validate the notification source. 
        /// </remarks>
        /// <param name="version">The version associated with the key.</param>
        /// 
        /// <exception cref="ArgumentNullException">
        /// The <paramref name="version"/> is <b>null</b>.
        /// </exception>
        public NotificationAuthenticationSharedKeyInfo(string version)
        {
            Validator.ThrowIfArgumentNull(version, "version", "ArgumentNull");

            Version = version;
            GenerateKey();
        }

        /// <summary>
        /// Create an instance of the <see cref="NotificationAuthenticationSharedKeyInfo"/> type, specifying the
        /// key and version to use.
        /// </summary>
        /// <param name="version">The version associated with the key.</param>
        /// <param name="key">The key.</param>
        /// 
        /// <exception cref="ArgumentNullException">
        /// The <paramref name="version"/> or <paramref name="key"/> is <b>null</b>.
        /// </exception>
        /// 
        /// <exception cref="ArgumentException">
        /// The <paramref name="key"/> is not 64 bytes in length.
        /// </exception>
        public NotificationAuthenticationSharedKeyInfo(string version, byte[] key) :
            this(version)
        {
            Validator.ThrowIfArgumentNull(key, "key", "ArgumentNull");

            Validator.ThrowArgumentExceptionIf(key.Length != 64, "key", "KeyIncorrectLength");
            _key = key;
        }

        /// <summary>
        /// Create an instance of the <see cref="NotificationAuthenticationSharedKeyInfo"/> type, specifying the
        /// key and version to use.
        /// </summary>
        /// <param name="version">The version associated with the key.</param>
        /// <param name="keyBase64">The base64-encoded key.</param>
        /// 
        /// <exception cref="ArgumentNullException">
        /// The <paramref name="version"/> or <paramref name="keyBase64"/> is <b>null</b>.
        /// </exception>
        /// 
        /// <exception cref="ArgumentException">
        /// The <paramref name="keyBase64"/> is not 64 bytes in length.
        /// </exception>
        public NotificationAuthenticationSharedKeyInfo(string version, string keyBase64) :
            this(version)
        {
            Validator.ThrowIfArgumentNull(keyBase64, "keyBase64", "ArgumentNull");

            byte[] key = Convert.FromBase64String(keyBase64);

            Validator.ThrowArgumentExceptionIf(key.Length != 64, "keyString", "KeyIncorrectLength");
            _key = key;
        }

        /// <summary>
        /// A string representing the version of the key.
        /// </summary>
        /// <remarks>
        /// The version can only consist of the characters "A-Z", "a-z", "0-9", and "-".
        /// 
        /// The version of the key is passed with the notification in the request headers. The application
        /// that processes this notification can use it to determine which key it should use to authenticate
        /// the notification (the key is not passed as part of the notification).
        /// 
        /// When an update is made to a
        /// subscription notification deliveries may use either
        /// the old key or the updated key to calculate the notification
        /// payload HMAC for a short period of time. The key version id is sent with the notification,
        /// allowing the app to determine which key was used to calculate
        /// the notification payload HMAC.
        /// </remarks>
        /// <exception cref="ArgumentException">
        /// The <paramref name="value"/> is empty or contains illegal characters.
        /// </exception>
        public string Version
        {
            get { return _version; }
            set 
            {
                Regex regex = new Regex("^[a-zA-Z0-9-]+$");
                if (!regex.IsMatch(value))
                {
                    throw Validator.ArgumentException("Version", "VersionInvalidCharacters");
                }
                _version = value;
            }
        }

        private string _version;

        /// <summary>
        /// The key that is used for the operation. 
        /// </summary>
        public byte[] Key
        {
            get { return _key; }
            set { _key = value; }
        }

        private byte[] _key;

        /// <summary>
        /// Generate a 64 byte key and store it in the Key property.
        /// </summary>
        public void GenerateKey()
        {
            RNGCryptoServiceProvider provider = new RNGCryptoServiceProvider();

            _key = new byte[64];
            provider.GetBytes(_key);
        }

        /// <summary>
        /// Write a representation of the NotificationAuthenticationSharedKeyInfo instance to XML.
        /// </summary>
        /// <param name="xmlWriter">The XmlWriter.</param>
        /// 
        /// <exception cref="InvalidOperationException">
        /// The <paramref name="xmlWriter"/> is <b>null</b>.
        /// </exception>
        public void WriteXml(XmlWriter xmlWriter)
        {
            xmlWriter.WriteStartElement("hv-eventing-shared-key");
            {
                string encodedKey = Convert.ToBase64String(_key);

                xmlWriter.WriteElementString("notification-key", encodedKey);
                xmlWriter.WriteElementString("notification-key-version-id", _version);
            }
            xmlWriter.WriteEndElement();
        }

        /// <summary>
        /// Populate the NotificationAuthenticationSharedKeyInfo instance from XML.
        /// </summary>
        /// <param name="navigator">The XPathNavigator.</param>
        /// 
        /// <exception cref="ArgumentNullException">
        /// The <paramref name="navigator"/> parameter is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentException">
        /// The <paramref name="navigator"/> parameter does not contain a "hv-eventing-shared-key" node.
        /// </exception>

        public void ParseXml(XPathNavigator navigator)
        {
            Validator.ThrowIfNavigatorNull(navigator);

            string version = XPathHelper.GetOptNavValue(navigator, "notification-key");
            _key = Convert.FromBase64String(version);
            
            _version = XPathHelper.GetOptNavValue(navigator, "notification-key-version-id");
        }
    }
}
